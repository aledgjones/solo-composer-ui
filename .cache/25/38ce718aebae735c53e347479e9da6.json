{"id":"../node_modules/roman-numerals/lib/toRoman.js","dependencies":[{"name":"/home/aled/solo-composer-ui/package.json","includedInParent":true,"mtime":1598459868758},{"name":"/home/aled/solo-composer-ui/node_modules/roman-numerals/package.json","includedInParent":true,"mtime":1595166873330}],"generated":{"js":"(function () {\n  /**\n   * Generate the roman number for the current power of tenth\n   *\n   * @param {Number} num\n   * @param {String} one\n   * @param {String} five\n   * @param {String} ten\n   * @return {String}\n   */\n  function upToTen (num, one, five, ten) {\n    var value = '';\n    switch (num) {\n      case 0: return value;\n      case 9: return one + ten;\n      case 4: return one + five;\n    }\n    if (num >= 5) value = five, num -= 5;\n    while (num-- > 0) value += one;\n    return value;\n  }\n\n\n  /**\n   * Converts an arabic number from 0 to 3999 to its roman equivalent.\n   *\n   * Will throw TypeError on non-number inputs (stringed numbers are accepted)\n   * or NaN and Error on number under 0 or over 3999.\n   *\n   * @param {Number/String} arabic\n   * @return {String}\n   */\n  function toRoman (arabic) {\n    // Checking input first with type comparisons, convert Number() instances to\n    // a literal, etc...\n    if (arabic instanceof Number) arabic = parseInt(arabic, 10);\n    if ('string' === typeof arabic || arabic instanceof String) {\n      arabic = parseInt(arabic, 10);\n      if (isNaN(arabic)) throw new TypeError('toArabic expects a number');\n    }\n    if ('number' !== typeof arabic) throw new TypeError('toArabic expects a number');\n\n    // Rounding up \"bad\" numbers: NaN, negative numbers, numbers over 3999,...\n    if (isNaN(arabic)) throw new TypeError('toArabic expects a real number');\n    if (arabic < 0) throw new Error('toArabic cannot express negative numbers');\n    if (arabic > 3999) throw new Error('toArabic cannot express numbers over 3999');\n\n    // Zero is/was a special case. I'll go with Dionysius Exiguus on this one as\n    // seen on http://en.wikipedia.org/wiki/Roman_numerals#Zero\n    if (arabic === 0) return 'nulla';\n    var roman = '';\n\n    // Chomping away by the power of tenths\n    roman += upToTen(Math.floor(arabic / 1000), 'M', '', ''), arabic %= 1000;\n    roman += upToTen(Math.floor(arabic / 100), 'C', 'D', 'M'), arabic %= 100;\n    roman += upToTen(Math.floor(arabic / 10), 'X', 'L', 'C'), arabic %= 10;\n    roman += upToTen(arabic, 'I', 'V', 'X');\n    return roman;\n  };\n\n\n  module.exports = toRoman;\n\n})();\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/roman-numerals/lib/toRoman.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}}],"sources":{"../node_modules/roman-numerals/lib/toRoman.js":"(function () {\n  /**\n   * Generate the roman number for the current power of tenth\n   *\n   * @param {Number} num\n   * @param {String} one\n   * @param {String} five\n   * @param {String} ten\n   * @return {String}\n   */\n  function upToTen (num, one, five, ten) {\n    var value = '';\n    switch (num) {\n      case 0: return value;\n      case 9: return one + ten;\n      case 4: return one + five;\n    }\n    if (num >= 5) value = five, num -= 5;\n    while (num-- > 0) value += one;\n    return value;\n  }\n\n\n  /**\n   * Converts an arabic number from 0 to 3999 to its roman equivalent.\n   *\n   * Will throw TypeError on non-number inputs (stringed numbers are accepted)\n   * or NaN and Error on number under 0 or over 3999.\n   *\n   * @param {Number/String} arabic\n   * @return {String}\n   */\n  function toRoman (arabic) {\n    // Checking input first with type comparisons, convert Number() instances to\n    // a literal, etc...\n    if (arabic instanceof Number) arabic = parseInt(arabic, 10);\n    if ('string' === typeof arabic || arabic instanceof String) {\n      arabic = parseInt(arabic, 10);\n      if (isNaN(arabic)) throw new TypeError('toArabic expects a number');\n    }\n    if ('number' !== typeof arabic) throw new TypeError('toArabic expects a number');\n\n    // Rounding up \"bad\" numbers: NaN, negative numbers, numbers over 3999,...\n    if (isNaN(arabic)) throw new TypeError('toArabic expects a real number');\n    if (arabic < 0) throw new Error('toArabic cannot express negative numbers');\n    if (arabic > 3999) throw new Error('toArabic cannot express numbers over 3999');\n\n    // Zero is/was a special case. I'll go with Dionysius Exiguus on this one as\n    // seen on http://en.wikipedia.org/wiki/Roman_numerals#Zero\n    if (arabic === 0) return 'nulla';\n    var roman = '';\n\n    // Chomping away by the power of tenths\n    roman += upToTen(Math.floor(arabic / 1000), 'M', '', ''), arabic %= 1000;\n    roman += upToTen(Math.floor(arabic / 100), 'C', 'D', 'M'), arabic %= 100;\n    roman += upToTen(Math.floor(arabic / 10), 'X', 'L', 'C'), arabic %= 10;\n    roman += upToTen(arabic, 'I', 'V', 'X');\n    return roman;\n  };\n\n\n  module.exports = toRoman;\n\n})();\n"},"lineCount":65}},"error":null,"hash":"c56789737ddfbdf7a7862e1ac2356559","cacheData":{"env":{}}}